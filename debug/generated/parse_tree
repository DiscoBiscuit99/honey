[
    Declaration {
        mutable: false,
        name: "a",
        datatype: Number,
        value: NumberLiteral(
            "3",
        ),
    },
    Declaration {
        mutable: false,
        name: "a",
        datatype: Number,
        value: Addition {
            augend: NumberLiteral(
                "3",
            ),
            addend: Multiplication {
                multiplicant: Division {
                    dividend: NumberLiteral(
                        "1",
                    ),
                    divisor: NumberLiteral(
                        "2",
                    ),
                },
                multiplier: Subtraction {
                    minuend: NumberLiteral(
                        "2",
                    ),
                    subtrahend: NumberLiteral(
                        "3",
                    ),
                },
            },
        },
    },
    Declaration {
        mutable: false,
        name: "f",
        datatype: FuncType {
            parameters: [
                Parameter {
                    name: "x",
                    datatype: Number,
                },
            ],
            return_type: Number,
        },
        value: Identifier(
            "x",
        ),
    },
    Declaration {
        mutable: false,
        name: "f",
        datatype: FuncType {
            parameters: [
                Parameter {
                    name: "x",
                    datatype: Number,
                },
            ],
            return_type: Number,
        },
        value: Block(
            Block {
                statements: [
                    Declaration {
                        mutable: false,
                        name: "b",
                        datatype: Number,
                        value: Multiplication {
                            multiplicant: Identifier(
                                "x",
                            ),
                            multiplier: NumberLiteral(
                                "2",
                            ),
                        },
                    },
                    Declaration {
                        mutable: false,
                        name: "c",
                        datatype: Number,
                        value: Multiplication {
                            multiplicant: Identifier(
                                "b",
                            ),
                            multiplier: NumberLiteral(
                                "3",
                            ),
                        },
                    },
                ],
                return_value: Identifier(
                    "c",
                ),
            },
        ),
    },
    Declaration {
        mutable: false,
        name: "h",
        datatype: Number,
        value: FunctionCall {
            name: "f",
            arguments: [
                Addition {
                    augend: NumberLiteral(
                        "3",
                    ),
                    addend: NumberLiteral(
                        "4",
                    ),
                },
            ],
        },
    },
    Declaration {
        mutable: false,
        name: "fib",
        datatype: FuncType {
            parameters: [
                Parameter {
                    name: "n",
                    datatype: Number,
                },
            ],
            return_type: Number,
        },
        value: Block(
            Block {
                statements: [],
                return_value: If(
                    If {
                        if_block: ConditionalBlock {
                            condition: LessThan {
                                left: Identifier(
                                    "n",
                                ),
                                right: NumberLiteral(
                                    "2",
                                ),
                            },
                            block: Block {
                                statements: [],
                                return_value: NumberLiteral(
                                    "1",
                                ),
                            },
                        },
                        else_if_blocks: [],
                        else_block: Some(
                            Block {
                                statements: [],
                                return_value: Addition {
                                    augend: FunctionCall {
                                        name: "fib",
                                        arguments: [
                                            Subtraction {
                                                minuend: Identifier(
                                                    "n",
                                                ),
                                                subtrahend: NumberLiteral(
                                                    "1",
                                                ),
                                            },
                                        ],
                                    },
                                    addend: FunctionCall {
                                        name: "fib",
                                        arguments: [
                                            Subtraction {
                                                minuend: Identifier(
                                                    "n",
                                                ),
                                                subtrahend: NumberLiteral(
                                                    "2",
                                                ),
                                            },
                                        ],
                                    },
                                },
                            },
                        ),
                    },
                ),
            },
        ),
    },
    Declaration {
        mutable: false,
        name: "if_else_test",
        datatype: FuncType {
            parameters: [
                Parameter {
                    name: "n",
                    datatype: Number,
                },
            ],
            return_type: Number,
        },
        value: Block(
            Block {
                statements: [],
                return_value: If(
                    If {
                        if_block: ConditionalBlock {
                            condition: LessThan {
                                left: Addition {
                                    augend: NumberLiteral(
                                        "1",
                                    ),
                                    addend: Identifier(
                                        "n",
                                    ),
                                },
                                right: NumberLiteral(
                                    "2",
                                ),
                            },
                            block: Block {
                                statements: [
                                    ExpressionStatement(
                                        FunctionCall {
                                            name: "print",
                                            arguments: [
                                                Identifier(
                                                    "fiz",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                                return_value: NumberLiteral(
                                    "1",
                                ),
                            },
                        },
                        else_if_blocks: [],
                        else_block: Some(
                            Block {
                                statements: [
                                    ExpressionStatement(
                                        FunctionCall {
                                            name: "print",
                                            arguments: [
                                                Identifier(
                                                    "buz",
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                                return_value: NumberLiteral(
                                    "4",
                                ),
                            },
                        ),
                    },
                ),
            },
        ),
    },
    Declaration {
        mutable: false,
        name: "f",
        datatype: FuncType {
            parameters: [
                Parameter {
                    name: "n",
                    datatype: Number,
                },
            ],
            return_type: Number,
        },
        value: Block(
            Block {
                statements: [
                    ExpressionStatement(
                        Block(
                            Block {
                                statements: [
                                    ExpressionStatement(
                                        NumberLiteral(
                                            "1",
                                        ),
                                    ),
                                ],
                                return_value: Unit,
                            },
                        ),
                    ),
                ],
                return_value: Unit,
            },
        ),
    },
    Declaration {
        mutable: false,
        name: "f",
        datatype: FuncType {
            parameters: [
                Parameter {
                    name: "n",
                    datatype: Number,
                },
            ],
            return_type: Number,
        },
        value: Block(
            Block {
                statements: [
                    ExpressionStatement(
                        Block(
                            Block {
                                statements: [
                                    ExpressionStatement(
                                        NumberLiteral(
                                            "1",
                                        ),
                                    ),
                                ],
                                return_value: Unit,
                            },
                        ),
                    ),
                ],
                return_value: Unit,
            },
        ),
    },
    Declaration {
        mutable: false,
        name: "f",
        datatype: FuncType {
            parameters: [
                Parameter {
                    name: "n",
                    datatype: Number,
                },
            ],
            return_type: Number,
        },
        value: Block(
            Block {
                statements: [
                    ExpressionStatement(
                        Block(
                            Block {
                                statements: [],
                                return_value: NumberLiteral(
                                    "1",
                                ),
                            },
                        ),
                    ),
                ],
                return_value: Unit,
            },
        ),
    },
    Declaration {
        mutable: false,
        name: "f",
        datatype: FuncType {
            parameters: [
                Parameter {
                    name: "n",
                    datatype: Number,
                },
            ],
            return_type: Number,
        },
        value: Block(
            Block {
                statements: [
                    ExpressionStatement(
                        Block(
                            Block {
                                statements: [],
                                return_value: NumberLiteral(
                                    "1",
                                ),
                            },
                        ),
                    ),
                ],
                return_value: Unit,
            },
        ),
    },
]